┃ TODO
   Обзор сетевых менеджеров;
   Цвет имён запускаемых скриптов (ныне зелёный) настраиваемым через конфиг, на 
      случай другой раскраски терминала;
   Заменить zsh на bash;
   Комментарии и документация на английском;
   Пакет для генты
   Пакеты для других ОС


┃ IO
   │ Можно настроить syslog на то, чтобы логи dhcp клались в отдельный файл
   wpa_supplicant
      -B моментально форкается, не дожидаясь настройки соединения.
      -s писать в syslog вместо stdout. В генте эта фича не скомпилирована.
      -f писать в файл вместо stdout.
      По умолчанию не пишет ничего на стандартные потоки, если видит, что 
      запустили не из терминала (может по /dev/tty ?). Можно принудить его всё 
      таки выводить логи с помощью -d
   dhcpcd
      После того как настроит соединение, делает форк. До форка пишет на 
      stderr. Пишет все логи в syslog. -B для запрета форканья, при этом все 
      логи идут на stderr и в syslog.
   dhclient
      После того как настроит соединение, делает форк. С ключём -v перед форком 
      будет писать на stderr, иначе вообще ничего не пишет на стандартные 
      потоки. Пишет все логи в syslog. -nw для того чтобы форк был сделан 
      сразу, без ожидания пока настроится соединение.


┃ Команды

   # new
      netn ξ ξ ξ... — остановить все соединения и поднять заданные

   # up
      netu ξ ξ ξ... — остановить заданные соединения и поднять снова
      netu — остановить все работающие соединения и поднять снова
         --quiet — подавить вывод на stdout
         --resume — не опускать работающие соединения, используется при старте 
            службы, чтобы поднять работавшие ранее соединения.

   # down
      netd ξ ξ ξ... — остановить заданные соединения
      netd — остановить все работащие соединения
         --quiet — подавить вывод на stdout
         --suspend — не очищать список работающих соединений, используется при 
            выключении службы, чтобы потом возобновить работу с того же места.

   # status
      nets — показать ныне работающие соединения


┃ Все возможные задачи
   • Опустить все соединения и поднять набор новых.
      │ В новом месте после долгого перерыва, когда я уже не помню что сейчас 
      │ работает и с чем конфликтует.
   • Показать текущие соединения.
   • Дополнительно поднять одно соединение или опустить одно соединение.
      │ Включить/выключить яндексовый vpn, чтобы не грузить яндексовые сети, 
      │ когда мне не нужны их сервисы и вообще не хочется там светиться.
   • Перезапустить текущие соединения.
      │ Почти всегда помогает, если внезапно отвалился инэт и не хочется 
      │ разбираться.
   • Опустить все соединения.
      │ Перед долгой автономной работой.


┃ Планировка команд для поднятия соединений
   Какие возможны варианты поднятия соединений:
   1) предварительно опускать все работающие соединения
   2) предварительно опускать только запрашиваемые работающие соединения
   3) предварительно не опускать работающие соединения

   3-я задача выглядит не обязательной и мало полезной. 2-я задача оправданна, 
   так как смысла поднимать уже работающее соединение действительно нет. К тому 
   же команда для перезапуска конкретного соединения кажется востребованной. 
   Таким образом удобно сделать отдельные команды для 1-й и 2-й задачи, а 3-ю 
   задачу отбросить как не нужную.

   Так как 2-я задача может использоваться для рестарта конкретных соединений, 
   то для единообразия её же использую для рестарта всех ныне имеющихся 
   соединений.


┃ Бездействие, если запрашиваемое соединение уже поднято
   Решил убрать функционал по бездействию в случае, если соединение уже 
   поднято:
      $ netu lair/wlan
         Это соединение уже поднято.
   так как практической пользы тут нет. Как правило, если я захотел сделать 
   такую штуку, то я вижу, что в действительности соединение не работает и 
   возможно не работают соответствующие процессы. Так что заявление о том, что 
   соединение уже поднято выглядит нелепо. Гораздо лучше прямо подчиниться 
   желанию пользователя — поднять соединение предварительно остановив возможную 
   предыдущую версию.


┃ Файлы

   /usr/local/bin/...
      Haskell-бинарники

   /var/lib/netm/active
      Имена активных соединений, просто названия каталогов через пробел

   /etc/netm/
      Пользовательские настройки
      │ example1/...
      │ example2/...
      │ ...

   /etc/local.d/netm.start
      Восстановление соединений после перезагрузки. От полноценного скрипта 
      инициализации мало пользы, так как это будет урезанная версия команд, 
      доступных через бинарники. С другой стороны тоже самое можно сказать про 
      nginx, но они предоставляют нативные средста управления для каждой 
      системы.


┃ Именования

   # Расширения конфигов
      Для исполняемых файлов не принято писать расширение. Видимо потому что 
      всё их использование состоит в том, что их запускают, поэтому на каком 
      языке они реализованы не важно для этой задачи. А вот для текстового 
      файла важно расширение, чтобы и людям и программам было сразу понятно что 
      делать с файлом.

      Но конфиги — это не обычный бинарник из /usr/bin. Они часто редактируется 
      пользователем, поэтому к ним отношение скорее как к исходникам.

      С другой стороны без расширений конфиги будут гораздо легче смотреться в 
      nets и на stdout при запуске. Там совершенно не нужно знать на каком 
      именно ЯП реализован конфиг.

   # Подчёркивания для служебных файлов vs заглавная буква в имени конфига
      Решил не именовать конфиги с большой буквы.
      - некраисво смотрится в сочетании с путём, где все остальные каталоги 
         начинаются с маленькой: nest/Wlan up
      - неединообразно с _helpers
      - подчёркивание традиционно считается обозначением служебных сущностей

      Исполныемый файл можно делать с большой буквы, чтобы он был первым в 
      списке. Тогда его будет удобно запускать. Но при этом вряд ли 
      пользователь захочет делать имена двух исполняемых файлов, различающиеся 
      только регистром первой буквы.
